#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Check Prime

#!csharp

bool CheckPrime(int num){
    if(num == 0 || num == 1)
        return false;
    if(num == 2)
        return true;
    int i = 2;
    while(i <= num/2){
        if(num % i == 0)
            return false;
        i++;
    }
    return true;
}

Console.WriteLine(CheckPrime(4));
Console.WriteLine(CheckPrime(5));
Console.WriteLine(CheckPrime(13));
Console.WriteLine(CheckPrime(16));

#!markdown

# Sum of Digits

#!csharp

int SumOfDigit(int num){
    if(num == 0)
        return 0;
    return num % 10 + SumOfDigit(num/10);
}

int sum = SumOfDigit(1234);
Console.WriteLine(sum);

#!markdown

# Find Angle in Time

#!csharp

int FindAngleInTime(int hour, int minute){
    int hourDegree = (hour * 30) + (minute * 30 / 60);
            int minuteDegree = (minute * 6);

            int diffDegree = Math.Abs(hourDegree - minuteDegree);
            if(diffDegree > 180)
            {
                return (360 - diffDegree);
            }
            return diffDegree;
}

Console.WriteLine(FindAngleInTime(5,10));

#!markdown

# Find Nth Fibonacci

#!csharp

int FindNthFibonacci(int n){
    if(n == 0) return 0;
    if(n == 1) return 1;

    return n + FindNthFibonacci(n-1);
}

Console.WriteLine(FindNthFibonacci(3));

#!markdown

# Reverse

#!csharp

int Reverse(int n){
     int reverse = 0;
            while(n > 0)
            {
                int remainder = n % 10;
                reverse = reverse + remainder * 10;
                n = n / 10;
            }
        return reverse;
}

#!markdown

# Find Missing Number

#!csharp

IEnumerable<int> FindMissingElements(int[] array){
    Array.Sort(array);
    List<int> missingElements = new List<int>();

    for(int i = 0; i < array.Length-1; i++){
        if(array[i]+ 1 != array[i+1]){
            missingElements.Add(array[i] + 1);
            while(missingElements.Last() != array[i+1]-1)
                missingElements.Add(missingElements.Last()+ 1);
        }
    }
    return missingElements;
}

var result = FindMissingElements(new int[]{1,3,5,7,9,13});

foreach(var r in result)
    Console.WriteLine(r);

#!markdown

# Factors

#!csharp

        public static IEnumerable<int>  Factors(int number)
        {
            List<int> result = new List<int>();
            if (number == 0 || number == 1) return result.Append(number);
            int limit = number / 2;
            for(int i = 1; i <= limit; i++)
            {
                if (number % i == 0)
                    result.Append(number);
            }
            return result;
        }

#!csharp

 // POWER
 public static int Power(int @base, int exponent)
        {
            if (exponent == 0) return 1;
            return @base * Power(@base, exponent - 1); 
        }
// GCD
        public static int GCD(int number1, int number2)
        {
            if (number1 == 0) return number2;
            if (number2 == 0) return number1;
            if (number1 == number2) return number1;
            if (number1 > number2)
                return GCD(number1 - number2, number2);
            return GCD(number1, number2 - number1);
        }
// Palindrome
        public static bool Palindrome(int number)
        {
            int temp = number;
            int reverse = 0;
            while(number > 0)
            {
                int remainder = number % 10;
                reverse = reverse + remainder * 10;
                number = number / 10;
            }
            if (temp == reverse)
                return true;
            return false;
        }

// Check Arm Strong Number
        public static bool CheckArmStrongNumber(int number)
        {
            int temp = number;
            int sum = 0;
            while (number > 0)
            {
                int m = number % 10;
                sum += (m * m * m);
                number = number / 10;
            }
            if (sum == temp) return true;
            else
                return false;
        }
